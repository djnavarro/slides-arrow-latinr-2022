---
title: "A tour of the Apache Arrow ecosystem for the R community"
author: "Danielle Navarro"
execute:
  echo: true
  fig-width: 10
  fig-height: 6
format: 
  revealjs:
    theme: dark
---

```{r settings}
#| include: false

# can't seem to make this work in the yaml so...
knitr::opts_chunk$set(dev.args = list(bg="#191919"))

# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")

# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$out.lines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "...\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})

# global option to set output print width
options(width = 75)
```

# What is Apache Arrow?

> | 
>
> A multi-language toolbox <br> For accelerated data interchange <br> And in-memory processing

## Accelerating data interchange

![](img/data-interchange-1.svg)

## Accelerating data interchange

![](img/data-interchange-2.svg)

## Efficient in-memory processing

![](img/simd-1.svg)

## Efficient in-memory processing

![](img/simd-2.svg)

## Efficient in-memory processing

![](img/simd-3.svg)

## Efficient in-memory processing

![](img/simd-4.svg)

# R in the Arrow Ecosystem

## R in the Arrow Ecosystem

![](img/arrow-ecosystem-1.svg)

## R in the Arrow Ecosystem

![](img/arrow-ecosystem-2.svg)

## R in the Arrow Ecosystem

![](img/arrow-ecosystem-3.svg)

# Arrow in the R Ecosystem

## Arrow in the R Ecosystem

- Analyze, process, and write multi-file parquet, csv, S3 buckets, etc
- Larger-than-memory data sets
- Analyze Arrow data using dplyr verbs
- And more...

## Arrow in the R Ecosystem

![](img/dplyr-backends-1.svg)

## Arrow in the R Ecosystem

![](img/dplyr-backends-2.svg)

## Arrow in the R Ecosystem

![](img/dplyr-backends-3.svg)

## Arrow in the R Ecosystem

![](img/dplyr-backends-4.svg)

# How do I get started?

This talk isn't meant to be a tutorial but I still think it's a kindness to list some resources to help you get started 


## The useR! workshop

## Some blog posts!


## Packages for this talk

```{r load-packages}
#| message: false
library(tidyverse)
library(reticulate)
library(arrow)
library(tictoc)
```


# Case study 1: [Visualizing a billion rows of data in less time than it takes to make a cup of coffee](https://blog.djnavarro.net/visualising-a-billion-rows/)


## Open the NYC taxi data

```{r}
nyc_taxi <- open_dataset("~/Datasets/nyc-taxi/")
```

## Glimpse the NYC taxi data

```{r glimpse-nyc}
#| cache: true
glimpse(nyc_taxi)
```

## Set some handy quantities

```{r set-constants}
pixels <- 4000 # image will be 4000x4000 pixels
x0 <- -74.05   # minimum longitude to plot
y0 <- 40.6     # minimum latitude to plot
span <- 0.3    # size of the lat/long window to plot
```

## Count pickups at each image pixel

```{r count-pickups}
#| cache: true
tic()
pickup <- nyc_taxi |>
  filter(
    !is.na(pickup_longitude) & !is.na(pickup_latitude),
    pickup_longitude > x0 & pickup_longitude < x0 + span,
    pickup_latitude > y0 & pickup_latitude < y0 + span
  ) |>
  mutate(
    unit_scaled_x = (pickup_longitude - x0) / span,
    unit_scaled_y = (pickup_latitude - y0) / span,
    x = as.integer(round(pixels * unit_scaled_x)), 
    y = as.integer(round(pixels * unit_scaled_y))
  ) |>
  count(x, y, name = "pickup") |>
  collect()
toc()
```


## Glimpse the pickup counts

```{r glimpse-pickups}
glimpse(pickup)
```

## Place pickup counts on a grid

```{r grid-pickup-counts}
#| cache: true
tic()
grid <- expand_grid(x = 1:pixels, y = 1:pixels) |>
  left_join(pickup, by = c("x", "y")) |>
  mutate(pickup = replace_na(pickup,  0))
toc()
```

```{r glimpse-grid}
glimpse(grid)
```

## Coerce to matrix

```{r pickup-matrix}
pickup_grid <- matrix(
  data = grid$pickup,
  nrow = pixels,
  ncol = pixels
)

pickup_grid[2000:2009, 2000:2009]
```

## Visualization function

```{r render-image}
render_image <- function(mat, cols) {
  op <- par(mar = c(0, 0, 0, 0))
  shades <- colorRampPalette(cols)
  image(
    z = log10(t(mat + 1)),
    axes = FALSE,
    asp = 1,
    col = shades(256),
    useRaster = TRUE
  )
  par(op)
}
```

## Visualization 

```{r data-vis}
render_image(pickup_grid, cols = c("#002222", "white", "#800020"))
```


# Case study 2: [Absurdly fast data sharing between R and Python](https://blog.djnavarro.net/reticulated-arrow/)

## Set up reticulate and python environment

```{r python-setup}
conda_list()
use_miniconda("reptilia")
```


```{r python-env}
# conda_create("reptilia", packages = c("pandas", "pyarrow"))
```

## Load data as a native R data frame 

```{r read-taxa-dataframe}
r_taxa <- read_csv2("taxa.csv")
glimpse(r_taxa)
```

## Copy to Python pandas

```{r copy-pandas}
py_taxa <- r_to_py(r_taxa)
py_taxa
```

## Load as an Arrow table in R

```{r read-taxa-table}
r_taxa_arrow <- read_delim_arrow(
  file = "taxa.csv", 
  delim = ";", 
  as_data_frame = FALSE
)
glimpse(r_taxa_arrow)
```

## Pass an Arrow table from R to Python

```{r transfer-to-python}
py_taxa_arrow <- r_to_py(r_taxa_arrow)
py_taxa_arrow
```


## Data wrangling across languages

```{python polyglot-data-wrangle-1}
# Python code
counts_arrow = r.py_taxa_arrow                       \
                .group_by("family")                  \
                .aggregate([("taxon_id", "count")])  \
                .sort_by([("family", "ascending")])
```

```{r polyglot-data-wrangle-2}
# R code
glimpse(py$counts_arrow)
```


## Some benchmarking code...

```{r handover-benchmark}
#| cache: true
handover_time <- function(n, arrow = FALSE) {
  data_in_r <- slice_sample(r_taxa, n = n, replace = TRUE)
  if(arrow) data_in_r <- arrow_table(data_in_r)
  tic()
  data_in_python <- r_to_py(data_in_r)
  t <- toc(quiet = TRUE)
  return(t$toc - t$tic)
}

times <- tibble(
  n = seq(100000, 10000000, length.out = 100),
  data_frame = map_dbl(n, handover_time),
  arrow_table = map_dbl(n, handover_time, arrow = TRUE),
)
```

## How long does it take to pass data?

```{r plot-benchmarks}
#| echo: false
times |> 
  pivot_longer(
    cols = c("data_frame", "arrow_table"), 
    names_to = "type", 
    values_to = "time"
  ) |> 
  mutate(
    type = type |> 
      factor(
        levels = c("data_frame", "arrow_table"),
        labels = c("Data Frames", "Arrow Tables")
      )
  ) |>
  ggplot(aes(n / 1000000, time)) + 
  geom_point() + 
  facet_wrap(~type) + 
  theme_bw(base_size = 24) + 
  labs(
    x = "Millons of Rows (of Taxa Data)",
    y = "Handover Time (Seconds)"
  )
```


# Case study 3: [Efficiently transferring Arrow data over a network with Arrow Flight]()


